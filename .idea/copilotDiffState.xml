<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/project/ecommerce/controller/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/project/ecommerce/controller/AuthController.java" />
              <option name="originalContent" value="package com.project.ecommerce.controller;&#10;&#10;import com.project.ecommerce.dto.AuthResponse;&#10;import com.project.ecommerce.dto.LoginRequest;&#10;import com.project.ecommerce.dto.SignupRequest;&#10;import com.project.ecommerce.entity.Role;&#10;import com.project.ecommerce.entity.User;&#10;import com.project.ecommerce.repository.UserRepository;&#10;import com.project.ecommerce.service.JwtService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/auth&quot;)&#10;public class AuthController {&#10;&#10;    private UserRepository userRepository;&#10;    private PasswordEncoder passwordEncoder;&#10;    private JwtService jwtService;&#10;&#10;    @Autowired&#10;    public AuthController(UserRepository userRepository, PasswordEncoder passwordEncoder, JwtService jwtService) {&#10;        this.userRepository = userRepository;&#10;        this.passwordEncoder = passwordEncoder;&#10;        this.jwtService = jwtService;&#10;    }&#10;&#10;    @PostMapping(&quot;/signup&quot;)&#10;    public ResponseEntity&lt;?&gt; signup(@Valid @RequestBody SignupRequest signupRequest) {&#10;&#10;            // get fields from request body&#10;            String name = signupRequest.getName();&#10;            String email = signupRequest.getEmail();&#10;            String password = signupRequest.getPassword();&#10;            Role role = signupRequest.getRole();&#10;&#10;        // check if email already exists&#10;        if (userRepository.existsByEmail(email)) {&#10;            throw new IllegalArgumentException(&quot;Email already exists!&quot;);&#10;        }&#10;&#10;        // get hashed password&#10;        String encodedPassword = passwordEncoder.encode(password);&#10;&#10;        // create and save user&#10;        User user = new User(name, email, encodedPassword, role);&#10;        userRepository.save(user);&#10;&#10;        // return success response&#10;        return ResponseEntity.ok(&quot;User registered successfully!&quot;);&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;?&gt; login(@Valid @RequestBody LoginRequest loginRequest) {&#10;&#10;        // looks for the user by email&#10;        Optional&lt;User&gt; potentialUser = userRepository.findByEmail(loginRequest.getEmail());&#10;&#10;        if (potentialUser.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Invalid email or password!&quot;);&#10;        }&#10;&#10;        User user = potentialUser.get();&#10;        // compares entered password with stored hashed password&#10;        if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {&#10;            return  ResponseEntity.status(401).body(&quot;Invalid password!&quot;);&#10;        }&#10;&#10;        String token = jwtService.generateToken(user.getId(),user.getRole());&#10;&#10;        return ResponseEntity.ok(new AuthResponse(token));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.project.ecommerce.controller;&#10;&#10;import com.project.ecommerce.dto.AuthResponse;&#10;import com.project.ecommerce.dto.LoginRequest;&#10;import com.project.ecommerce.dto.SignupRequest;&#10;import com.project.ecommerce.entity.Role;&#10;import com.project.ecommerce.entity.User;&#10;import com.project.ecommerce.repository.UserRepository;&#10;import com.project.ecommerce.service.JwtService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/auth&quot;)&#10;public class AuthController {&#10;&#10;    private UserRepository userRepository;&#10;    private PasswordEncoder passwordEncoder;&#10;    private JwtService jwtService;&#10;&#10;    @Autowired&#10;    public AuthController(UserRepository userRepository, PasswordEncoder passwordEncoder, JwtService jwtService) {&#10;        this.userRepository = userRepository;&#10;        this.passwordEncoder = passwordEncoder;&#10;        this.jwtService = jwtService;&#10;    }&#10;&#10;    @PostMapping(&quot;/signup&quot;)&#10;    public ResponseEntity&lt;?&gt; signup(@Valid @RequestBody SignupRequest signupRequest) {&#10;&#10;            // get fields from request body&#10;            String name = signupRequest.getName();&#10;            String email = signupRequest.getEmail();&#10;            String password = signupRequest.getPassword();&#10;            Role role = signupRequest.getRole();&#10;&#10;        // check if email already exists&#10;        if (userRepository.existsByEmail(email)) {&#10;            throw new IllegalArgumentException(&quot;Email already exists!&quot;);&#10;        }&#10;&#10;        // get hashed password&#10;        String encodedPassword = passwordEncoder.encode(password);&#10;&#10;        // create and save user&#10;        User user = new User(name, email, encodedPassword, role);&#10;        userRepository.save(user);&#10;&#10;        // return success response&#10;        return ResponseEntity.ok(&quot;User registered successfully!&quot;);&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;?&gt; login(@Valid @RequestBody LoginRequest loginRequest) {&#10;&#10;        // looks for the user by email&#10;        Optional&lt;User&gt; potentialUser = userRepository.findByEmail(loginRequest.getEmail());&#10;&#10;        if (potentialUser.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Invalid email or password!&quot;);&#10;        }&#10;&#10;        User user = potentialUser.get();&#10;        // compares entered password with stored hashed password&#10;        if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {&#10;            throw new IllegalArgumentException(&quot;Invalid password!&quot;);&#10;        }&#10;&#10;        String token = jwtService.generateToken(user.getId(),user.getRole());&#10;&#10;        return ResponseEntity.ok(new AuthResponse(token));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/project/ecommerce/controller/CartController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/project/ecommerce/controller/CartController.java" />
              <option name="originalContent" value="package com.project.ecommerce.controller;&#10;&#10;import com.project.ecommerce.dto.CartItemRequest;&#10;import com.project.ecommerce.dto.CartItemResponse;&#10;import com.project.ecommerce.service.CartService;&#10;import com.project.ecommerce.service.JwtService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/buyer/cart&quot;)&#10;public class CartController {&#10;&#10;    private CartService cartService;&#10;    private JwtService jwtService;&#10;&#10;    @Autowired&#10;    public CartController(CartService cartService, JwtService jwtService) {&#10;        this.cartService = cartService;&#10;        this.jwtService = jwtService;&#10;    }&#10;&#10;    @GetMapping(&quot;/items&quot;)&#10;    public ResponseEntity&lt;?&gt; getCartItems(HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // get cart items for the user&#10;            List&lt;CartItemResponse&gt; cartItems = cartService.getCartItemsResponse(userId);&#10;&#10;            return ResponseEntity.ok(cartItems);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error adding item to cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/add&quot;)&#10;    public ResponseEntity&lt;?&gt; addToCart(@Valid @RequestBody CartItemRequest cartItemRequest, HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // add item to cart&#10;            cartService.addToCart(userId, cartItemRequest);&#10;&#10;            return ResponseEntity.ok(&quot;Item added to cart successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error adding item to cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/remove/{productId}&quot;)&#10;    public ResponseEntity&lt;?&gt; removeFromCart(@PathVariable Long productId, HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // remove cart item for user&#10;            cartService.removeFromCart(userId, productId);&#10;            return ResponseEntity.ok(&quot;Item removed from cart successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error removing item from cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/clear&quot;)&#10;    public ResponseEntity&lt;?&gt; clearCart(HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // clear all cart items for the user&#10;            cartService.clearCart(userId);&#10;            return ResponseEntity.ok(&quot;Cart cleared successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error clearing cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.project.ecommerce.controller;&#10;&#10;import com.project.ecommerce.dto.CartItemRequest;&#10;import com.project.ecommerce.dto.CartItemResponse;&#10;import com.project.ecommerce.service.CartService;&#10;import com.project.ecommerce.service.JwtService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/buyer/cart&quot;)&#10;public class CartController {&#10;&#10;    private CartService cartService;&#10;    private JwtService jwtService;&#10;&#10;    @Autowired&#10;    public CartController(CartService cartService, JwtService jwtService) {&#10;        this.cartService = cartService;&#10;        this.jwtService = jwtService;&#10;    }&#10;&#10;    @GetMapping(&quot;/items&quot;)&#10;    public ResponseEntity&lt;?&gt; getCartItems(HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // get cart items for the user&#10;            List&lt;CartItemResponse&gt; cartItems = cartService.getCartItemsResponse(userId);&#10;&#10;            return ResponseEntity.ok(cartItems);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error adding item to cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/add&quot;)&#10;    public ResponseEntity&lt;?&gt; addToCart(@Valid @RequestBody CartItemRequest cartItemRequest, HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // add item to cart&#10;            cartService.addToCart(userId, cartItemRequest);&#10;&#10;            return ResponseEntity.ok(&quot;Item added to cart successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error adding item to cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/remove/{productId}&quot;)&#10;    public ResponseEntity&lt;?&gt; removeFromCart(@PathVariable Long productId, HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // remove cart item for user&#10;            cartService.removeFromCart(userId, productId);&#10;            return ResponseEntity.ok(&quot;Item removed from cart successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error removing item from cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/clear&quot;)&#10;    public ResponseEntity&lt;?&gt; clearCart(HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // clear all cart items for the user&#10;            cartService.clearCart(userId);&#10;            return ResponseEntity.ok(&quot;Cart cleared successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error clearing cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/project/ecommerce/controller/ReviewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/project/ecommerce/controller/ReviewController.java" />
              <option name="originalContent" value="package com.project.ecommerce.controller;&#10;&#10;import com.project.ecommerce.dto.ReviewRequest;&#10;import com.project.ecommerce.service.JwtService;&#10;import com.project.ecommerce.service.ReviewService;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/buyer&quot;)&#10;public class ReviewController {&#10;&#10;    private JwtService jwtService;&#10;    private ReviewService reviewService;&#10;&#10;    @Autowired&#10;    public ReviewController(JwtService jwtService, ReviewService reviewService) {&#10;        this.jwtService = jwtService;&#10;        this.reviewService = reviewService;&#10;    }&#10;&#10;    @PostMapping(&quot;/reviews&quot;)&#10;    public ResponseEntity&lt;?&gt; createReview(@Valid @RequestBody ReviewRequest reviewRequest, HttpServletRequest request) {&#10;&#10;        try {&#10;            // Extract user ID from JWT in request header&#10;            Long buyerId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // Submit the review&#10;            reviewService.submitReview(buyerId, reviewRequest);&#10;&#10;            return ResponseEntity.ok(&quot;Review submitted successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error submitting review: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.project.ecommerce.controller;&#10;&#10;import com.project.ecommerce.dto.ReviewRequest;&#10;import com.project.ecommerce.service.JwtService;&#10;import com.project.ecommerce.service.ReviewService;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/buyer&quot;)&#10;public class ReviewController {&#10;&#10;    private JwtService jwtService;&#10;    private ReviewService reviewService;&#10;&#10;    @Autowired&#10;    public ReviewController(JwtService jwtService, ReviewService reviewService) {&#10;        this.jwtService = jwtService;&#10;        this.reviewService = reviewService;&#10;    }&#10;&#10;    @PostMapping(&quot;/reviews&quot;)&#10;    public ResponseEntity&lt;?&gt; createReview(@Valid @RequestBody ReviewRequest reviewRequest, HttpServletRequest request) {&#10;        // Extract user ID from JWT in request header&#10;        Long buyerId = jwtService.extractUserIdFromRequest(request);&#10;        // Submit the review&#10;        reviewService.submitReview(buyerId, reviewRequest);&#10;        return ResponseEntity.ok(&quot;Review submitted successfully!&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/project/ecommerce/service/CartServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/project/ecommerce/service/CartServiceImpl.java" />
              <option name="originalContent" value="package com.project.ecommerce.service;&#10;&#10;import com.project.ecommerce.dto.CartItemRequest;&#10;import com.project.ecommerce.dto.CartItemResponse;&#10;import com.project.ecommerce.entity.CartItem;&#10;import com.project.ecommerce.entity.Product;&#10;import com.project.ecommerce.entity.User;&#10;import com.project.ecommerce.exception.CartItemNotFoundException;&#10;import com.project.ecommerce.exception.ProductNotFoundException;&#10;import com.project.ecommerce.exception.ResourceNotFoundException;&#10;import com.project.ecommerce.repository.CartItemRepository;&#10;import com.project.ecommerce.repository.ProductRepository;&#10;import com.project.ecommerce.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;@Transactional&#10;public class CartServiceImpl implements CartService {&#10;&#10;    private CartItemRepository cartItemRepository;&#10;    private ProductRepository productRepository;&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    public CartServiceImpl(CartItemRepository cartItemRepository, ProductRepository productRepository, UserRepository userRepository) {&#10;        this.cartItemRepository = cartItemRepository;&#10;        this.productRepository = productRepository;&#10;        this.userRepository = userRepository;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;CartItem&gt; getCartItems(Long userId) {&#10;&#10;        User buyer = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;User not found with id: &quot; + userId));&#10;&#10;        return cartItemRepository.findByBuyer(buyer);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;CartItemResponse&gt; getCartItemsResponse(Long userId) {&#10;        return getCartItems(userId).stream()&#10;                .map(cartItem -&gt; new CartItemResponse(&#10;                        cartItem.getId(),&#10;                        cartItem.getProduct().getId(),&#10;                        cartItem.getProduct().getName(),&#10;                        cartItem.getProduct().getPrice(),&#10;                        cartItem.getQuantity()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void addToCart(Long userId, CartItemRequest cartItemRequest) {&#10;&#10;        User buyer = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;&#10;        Product product = productRepository.findById(cartItemRequest.getProductId())&#10;                .orElseThrow(() -&gt; new ProductNotFoundException(&quot;Product not found with ID: &quot; + cartItemRequest.getProductId()));&#10;&#10;        // Check if product has enough stock&#10;        if (product.getQuantity() &lt; cartItemRequest.getQuantity()) {&#10;            throw new IllegalArgumentException(&quot;Insufficient stock. Available: &quot; + product.getQuantity());&#10;        }&#10;&#10;        Optional&lt;CartItem&gt; existingCartItem = Optional.ofNullable(cartItemRepository.findByBuyerAndProduct(buyer, product));&#10;&#10;        if (existingCartItem.isPresent()) {&#10;            CartItem cartItem = existingCartItem.get();&#10;            int newQuantity = cartItem.getQuantity() + cartItemRequest.getQuantity();&#10;&#10;            // Check if new total quantity exceeds available stock&#10;            if (product.getQuantity() &lt; cartItemRequest.getQuantity()) {&#10;                throw new IllegalArgumentException(&quot;Insufficient stock. Available: &quot; + product.getQuantity() + &quot;, Requested: &quot; + newQuantity);&#10;            }&#10;&#10;            cartItem.setQuantity(newQuantity);&#10;            cartItemRepository.save(cartItem);&#10;        } else {&#10;            CartItem cartItem = new CartItem(buyer, product, cartItemRequest.getQuantity());&#10;            cartItemRepository.save(cartItem);&#10;        }&#10;&#10;        product.setQuantity(product.getQuantity() - cartItemRequest.getQuantity());&#10;        productRepository.save(product);&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void removeFromCart(Long userId, Long productId) {&#10;&#10;        User buyer = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;&#10;        Product product = productRepository.findById(productId)&#10;                .orElseThrow(() -&gt; new ProductNotFoundException(&quot;Product not found&quot;));&#10;&#10;        CartItem cartItem = cartItemRepository.findByBuyerIdAndProductId(userId, productId)&#10;                .orElseThrow(() -&gt; new CartItemNotFoundException(&quot;CartItem not found for product ID: &quot;+productId));&#10;&#10;        cartItemRepository.delete(cartItem);&#10;        product.setQuantity(product.getQuantity() + cartItem.getQuantity());&#10;        productRepository.save(product);&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void clearCart(Long userId) {&#10;&#10;        User buyer = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;&#10;        cartItemRepository.deleteByBuyer(buyer);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.project.ecommerce.service;&#10;&#10;import com.project.ecommerce.dto.CartItemRequest;&#10;import com.project.ecommerce.dto.CartItemResponse;&#10;import com.project.ecommerce.entity.CartItem;&#10;import com.project.ecommerce.entity.Product;&#10;import com.project.ecommerce.entity.User;&#10;import com.project.ecommerce.exception.CartItemNotFoundException;&#10;import com.project.ecommerce.exception.ProductNotFoundException;&#10;import com.project.ecommerce.exception.ResourceNotFoundException;&#10;import com.project.ecommerce.repository.CartItemRepository;&#10;import com.project.ecommerce.repository.ProductRepository;&#10;import com.project.ecommerce.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;@Transactional&#10;public class CartServiceImpl implements CartService {&#10;&#10;    private CartItemRepository cartItemRepository;&#10;    private ProductRepository productRepository;&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    public CartServiceImpl(CartItemRepository cartItemRepository, ProductRepository productRepository, UserRepository userRepository) {&#10;        this.cartItemRepository = cartItemRepository;&#10;        this.productRepository = productRepository;&#10;        this.userRepository = userRepository;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;CartItem&gt; getCartItems(Long userId) {&#10;&#10;        User buyer = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;User not found with id: &quot; + userId));&#10;&#10;        return cartItemRepository.findByBuyer(buyer);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;CartItemResponse&gt; getCartItemsResponse(Long userId) {&#10;        return getCartItems(userId).stream()&#10;                .map(cartItem -&gt; new CartItemResponse(&#10;                        cartItem.getId(),&#10;                        cartItem.getProduct().getId(),&#10;                        cartItem.getProduct().getName(),&#10;                        cartItem.getProduct().getPrice(),&#10;                        cartItem.getQuantity()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void addToCart(Long userId, CartItemRequest cartItemRequest) {&#10;&#10;        User buyer = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;&#10;        Product product = productRepository.findById(cartItemRequest.getProductId())&#10;                .orElseThrow(() -&gt; new ProductNotFoundException(&quot;Product not found with ID: &quot; + cartItemRequest.getProductId()));&#10;&#10;        // Check if product has enough stock&#10;        if (product.getQuantity() &lt; cartItemRequest.getQuantity()) {&#10;            throw new IllegalArgumentException(&quot;Insufficient stock. Available: &quot; + product.getQuantity());&#10;        }&#10;&#10;        Optional&lt;CartItem&gt; existingCartItem = Optional.ofNullable(cartItemRepository.findByBuyerAndProduct(buyer, product));&#10;&#10;        if (existingCartItem.isPresent()) {&#10;            CartItem cartItem = existingCartItem.get();&#10;            int newQuantity = cartItem.getQuantity() + cartItemRequest.getQuantity();&#10;&#10;            // Check if new total quantity exceeds available stock&#10;            if (product.getQuantity() &lt; cartItemRequest.getQuantity()) {&#10;                throw new IllegalArgumentException(&quot;Insufficient stock. Available: &quot; + product.getQuantity() + &quot;, Requested: &quot; + newQuantity);&#10;            }&#10;&#10;            cartItem.setQuantity(newQuantity);&#10;            cartItemRepository.save(cartItem);&#10;        } else {&#10;            CartItem cartItem = new CartItem(buyer, product, cartItemRequest.getQuantity());&#10;            cartItemRepository.save(cartItem);&#10;        }&#10;&#10;        product.setQuantity(product.getQuantity() - cartItemRequest.getQuantity());&#10;        productRepository.save(product);&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void removeFromCart(Long userId, Long productId) {&#10;&#10;        User buyer = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;&#10;        Product product = productRepository.findById(productId)&#10;                .orElseThrow(() -&gt; new ProductNotFoundException(&quot;Product not found&quot;));&#10;&#10;        CartItem cartItem = cartItemRepository.findByBuyerIdAndProductId(userId, productId)&#10;                .orElseThrow(() -&gt; new CartItemNotFoundException(&quot;CartItem not found for product ID: &quot;+productId));&#10;&#10;        cartItemRepository.delete(cartItem);&#10;        product.setQuantity(product.getQuantity() + cartItem.getQuantity());&#10;        productRepository.save(product);&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void clearCart(Long userId) {&#10;&#10;        User buyer = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found&quot;));&#10;&#10;        cartItemRepository.deleteByBuyer(buyer);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/project/ecommerce/service/OrderServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/project/ecommerce/service/OrderServiceImpl.java" />
              <option name="originalContent" value="package com.project.ecommerce.service;&#10;&#10;import com.project.ecommerce.dto.OrderItemResponse;&#10;import com.project.ecommerce.dto.OrderResponse;&#10;import com.project.ecommerce.entity.*;&#10;import com.project.ecommerce.repository.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class OrderServiceImpl implements OrderService {&#10;&#10;    private OrderRepository orderRepository;&#10;    private UserRepository userRepository;&#10;    private ProductRepository productRepository;&#10;    private OrderItemRepository orderItemRepository;&#10;    private CartItemRepository cartItemRepository;&#10;&#10;    @Autowired&#10;    public OrderServiceImpl(OrderRepository orderRepository, UserRepository userRepository, ProductRepository productRepository, OrderItemRepository orderItemRepository, CartItemRepository cartItemRepository) {&#10;        this.orderRepository = orderRepository;&#10;        this.userRepository = userRepository;&#10;        this.productRepository = productRepository;&#10;        this.orderItemRepository = orderItemRepository;&#10;        this.cartItemRepository = cartItemRepository;&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void checkout(Long buyerId) {&#10;&#10;        User buyer = userRepository.findById(buyerId).orElseThrow(() -&gt; new RuntimeException(&quot;Buyer not found&quot;));&#10;&#10;        List&lt;CartItem&gt; cartItems = cartItemRepository.findByBuyerId(buyerId);&#10;        if (cartItems.isEmpty()) {&#10;            throw new RuntimeException(&quot;No cartItems found&quot;);&#10;        }&#10;        Order order = new Order();&#10;        order.setBuyer(buyer);&#10;        order.setCreatedAt(LocalDateTime.now());&#10;        order.setStatus(OrderStatus.PLACED);&#10;        orderRepository.save(order);&#10;&#10;        BigDecimal totalPrice = BigDecimal.ZERO;&#10;        for (CartItem cartItem : cartItems) {&#10;            Product product = cartItem.getProduct();&#10;            OrderItem orderItem = new OrderItem();&#10;            orderItem.setOrder(order);&#10;            orderItem.setProduct(product);&#10;            orderItem.setQuantity(cartItem.getQuantity());&#10;            orderItem.setPrice(product.getPrice());&#10;            totalPrice = totalPrice.add(product.getPrice().multiply((BigDecimal.valueOf(cartItem.getQuantity()))));&#10;            orderItemRepository.save(orderItem);&#10;        }&#10;&#10;        order.setTotal(totalPrice);&#10;        orderRepository.save(order);&#10;&#10;        cartItemRepository.deleteByBuyerId(buyerId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;OrderResponse&gt; getOrderHistory(Long buyerId) {&#10;&#10;        List&lt;Order&gt; orders = orderRepository.findByBuyerId(buyerId);&#10;        &#10;        return null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.project.ecommerce.service;&#10;&#10;import com.project.ecommerce.dto.OrderItemResponse;&#10;import com.project.ecommerce.dto.OrderResponse;&#10;import com.project.ecommerce.entity.*;&#10;import com.project.ecommerce.repository.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Service&#10;public class OrderServiceImpl implements OrderService {&#10;&#10;    private OrderRepository orderRepository;&#10;    private UserRepository userRepository;&#10;    private ProductRepository productRepository;&#10;    private OrderItemRepository orderItemRepository;&#10;    private CartItemRepository cartItemRepository;&#10;&#10;    @Autowired&#10;    public OrderServiceImpl(OrderRepository orderRepository, UserRepository userRepository, ProductRepository productRepository, OrderItemRepository orderItemRepository, CartItemRepository cartItemRepository) {&#10;        this.orderRepository = orderRepository;&#10;        this.userRepository = userRepository;&#10;        this.productRepository = productRepository;&#10;        this.orderItemRepository = orderItemRepository;&#10;        this.cartItemRepository = cartItemRepository;&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void checkout(Long buyerId) {&#10;&#10;        User buyer = userRepository.findById(buyerId).orElseThrow(() -&gt; new RuntimeException(&quot;Buyer not found&quot;));&#10;&#10;        List&lt;CartItem&gt; cartItems = cartItemRepository.findByBuyerId(buyerId);&#10;        if (cartItems.isEmpty()) {&#10;            throw new RuntimeException(&quot;No cartItems found&quot;);&#10;        }&#10;        Order order = new Order();&#10;        order.setBuyer(buyer);&#10;        order.setCreatedAt(LocalDateTime.now());&#10;        order.setStatus(OrderStatus.PLACED);&#10;        orderRepository.save(order);&#10;&#10;        BigDecimal totalPrice = BigDecimal.ZERO;&#10;        for (CartItem cartItem : cartItems) {&#10;            Product product = cartItem.getProduct();&#10;            OrderItem orderItem = new OrderItem();&#10;            orderItem.setOrder(order);&#10;            orderItem.setProduct(product);&#10;            orderItem.setQuantity(cartItem.getQuantity());&#10;            orderItem.setPrice(product.getPrice());&#10;            totalPrice = totalPrice.add(product.getPrice().multiply((BigDecimal.valueOf(cartItem.getQuantity()))));&#10;            orderItemRepository.save(orderItem);&#10;        }&#10;&#10;        order.setTotal(totalPrice);&#10;        orderRepository.save(order);&#10;&#10;        cartItemRepository.deleteByBuyerId(buyerId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;OrderResponse&gt; getOrderHistory(Long buyerId) {&#10;        List&lt;Order&gt; orders = orderRepository.findByBuyerId(buyerId);&#10;        List&lt;OrderResponse&gt; orderResponses = new ArrayList&lt;&gt;();&#10;        for (Order order : orders) {&#10;            List&lt;OrderItem&gt; orderItems = orderItemRepository.findByOrder(order);&#10;            List&lt;OrderItemResponse&gt; itemResponses = new ArrayList&lt;&gt;();&#10;            for (OrderItem item : orderItems) {&#10;                OrderItemResponse itemResponse = new OrderItemResponse(&#10;                        item.getProduct().getName(),&#10;                        item.getQuantity(),&#10;                        item.getPrice().doubleValue()&#10;                );&#10;                itemResponses.add(itemResponse);&#10;            }&#10;            OrderResponse orderResponse = new OrderResponse(&#10;                    order.getId(),&#10;                    order.getStatus().name(),&#10;                    order.getTotal().doubleValue(),&#10;                    order.getCreatedAt(),&#10;                    itemResponses&#10;            );&#10;            orderResponses.add(orderResponse);&#10;        }&#10;        return orderResponses;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>