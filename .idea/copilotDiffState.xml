<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/project/ecommerce/controller/CartController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/project/ecommerce/controller/CartController.java" />
              <option name="originalContent" value="package com.project.ecommerce.controller;&#10;&#10;import com.project.ecommerce.dto.CartItemRequest;&#10;import com.project.ecommerce.dto.CartItemResponse;&#10;import com.project.ecommerce.service.CartService;&#10;import com.project.ecommerce.service.JwtService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/buyer/cart&quot;)&#10;public class CartController {&#10;&#10;    private CartService cartService;&#10;    private JwtService jwtService;&#10;&#10;    @Autowired&#10;    public CartController(CartService cartService, JwtService jwtService) {&#10;        this.cartService = cartService;&#10;        this.jwtService = jwtService;&#10;    }&#10;&#10;    @GetMapping(&quot;/items&quot;)&#10;    public ResponseEntity&lt;?&gt; getCartItems(HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // get cart items for the user&#10;            List&lt;CartItemResponse&gt; cartItems = cartService.getCartItemsResponse(userId);&#10;&#10;            return ResponseEntity.ok(cartItems);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error adding item to cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/add&quot;)&#10;    public ResponseEntity&lt;?&gt; addToCart(@Valid @RequestBody CartItemRequest cartItemRequest, HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // add item to cart&#10;            cartService.addToCart(userId, cartItemRequest);&#10;&#10;            return ResponseEntity.ok(&quot;Item added to cart successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error adding item to cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/remove/{productId}&quot;)&#10;    public ResponseEntity&lt;?&gt; removeFromCart(@PathVariable Long productId, HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // remove cart item for user&#10;            cartService.removeFromCart(userId, productId);&#10;            return ResponseEntity.ok(&quot;Item removed from cart successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error removing item from cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/clear&quot;)&#10;    public ResponseEntity&lt;?&gt; clearCart(HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // clear all cart items for the user&#10;            cartService.clearCart(userId);&#10;            return ResponseEntity.ok(&quot;Cart cleared successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error clearing cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.project.ecommerce.controller;&#10;&#10;import com.project.ecommerce.dto.CartItemRequest;&#10;import com.project.ecommerce.dto.CartItemResponse;&#10;import com.project.ecommerce.service.CartService;&#10;import com.project.ecommerce.service.JwtService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/buyer/cart&quot;)&#10;public class CartController {&#10;&#10;    private CartService cartService;&#10;    private JwtService jwtService;&#10;&#10;    @Autowired&#10;    public CartController(CartService cartService, JwtService jwtService) {&#10;        this.cartService = cartService;&#10;        this.jwtService = jwtService;&#10;    }&#10;&#10;    @GetMapping(&quot;/items&quot;)&#10;    public ResponseEntity&lt;?&gt; getCartItems(HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // get cart items for the user&#10;            List&lt;CartItemResponse&gt; cartItems = cartService.getCartItemsResponse(userId);&#10;&#10;            return ResponseEntity.ok(cartItems);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error adding item to cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/add&quot;)&#10;    public ResponseEntity&lt;?&gt; addToCart(@Valid @RequestBody CartItemRequest cartItemRequest, HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // add item to cart&#10;            cartService.addToCart(userId, cartItemRequest);&#10;&#10;            return ResponseEntity.ok(&quot;Item added to cart successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error adding item to cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/remove/{productId}&quot;)&#10;    public ResponseEntity&lt;?&gt; removeFromCart(@PathVariable Long productId, HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // remove cart item for user&#10;            cartService.removeFromCart(userId, productId);&#10;            return ResponseEntity.ok(&quot;Item removed from cart successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error removing item from cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/clear&quot;)&#10;    public ResponseEntity&lt;?&gt; clearCart(HttpServletRequest request) {&#10;        try {&#10;            // extract user ID from JWT in request header&#10;            Long userId = jwtService.extractUserIdFromRequest(request);&#10;&#10;            // clear all cart items for the user&#10;            cartService.clearCart(userId);&#10;            return ResponseEntity.ok(&quot;Cart cleared successfully!&quot;);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest().body(&quot;Error clearing cart: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/project/ecommerce/service/OrderServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/project/ecommerce/service/OrderServiceImpl.java" />
              <option name="originalContent" value="package com.project.ecommerce.service;&#10;&#10;import com.project.ecommerce.dto.OrderItemResponse;&#10;import com.project.ecommerce.dto.OrderResponse;&#10;import com.project.ecommerce.entity.*;&#10;import com.project.ecommerce.repository.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class OrderServiceImpl implements OrderService {&#10;&#10;    private OrderRepository orderRepository;&#10;    private UserRepository userRepository;&#10;    private ProductRepository productRepository;&#10;    private OrderItemRepository orderItemRepository;&#10;    private CartItemRepository cartItemRepository;&#10;&#10;    @Autowired&#10;    public OrderServiceImpl(OrderRepository orderRepository, UserRepository userRepository, ProductRepository productRepository, OrderItemRepository orderItemRepository, CartItemRepository cartItemRepository) {&#10;        this.orderRepository = orderRepository;&#10;        this.userRepository = userRepository;&#10;        this.productRepository = productRepository;&#10;        this.orderItemRepository = orderItemRepository;&#10;        this.cartItemRepository = cartItemRepository;&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void checkout(Long buyerId) {&#10;&#10;        User buyer = userRepository.findById(buyerId).orElseThrow(() -&gt; new RuntimeException(&quot;Buyer not found&quot;));&#10;&#10;        List&lt;CartItem&gt; cartItems = cartItemRepository.findByBuyerId(buyerId);&#10;        if (cartItems.isEmpty()) {&#10;            throw new RuntimeException(&quot;No cartItems found&quot;);&#10;        }&#10;        Order order = new Order();&#10;        order.setBuyer(buyer);&#10;        order.setCreatedAt(LocalDateTime.now());&#10;        order.setStatus(OrderStatus.PLACED);&#10;        orderRepository.save(order);&#10;&#10;        BigDecimal totalPrice = BigDecimal.ZERO;&#10;        for (CartItem cartItem : cartItems) {&#10;            Product product = cartItem.getProduct();&#10;            OrderItem orderItem = new OrderItem();&#10;            orderItem.setOrder(order);&#10;            orderItem.setProduct(product);&#10;            orderItem.setQuantity(cartItem.getQuantity());&#10;            orderItem.setPrice(product.getPrice());&#10;            totalPrice = totalPrice.add(product.getPrice().multiply((BigDecimal.valueOf(cartItem.getQuantity()))));&#10;            orderItemRepository.save(orderItem);&#10;        }&#10;&#10;        order.setTotal(totalPrice);&#10;        orderRepository.save(order);&#10;&#10;        cartItemRepository.deleteByBuyerId(buyerId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;OrderResponse&gt; getOrderHistory(Long buyerId) {&#10;&#10;        List&lt;Order&gt; orders = orderRepository.findByBuyerId(buyerId);&#10;        &#10;        return null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.project.ecommerce.service;&#10;&#10;import com.project.ecommerce.dto.OrderItemResponse;&#10;import com.project.ecommerce.dto.OrderResponse;&#10;import com.project.ecommerce.entity.*;&#10;import com.project.ecommerce.repository.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Service&#10;public class OrderServiceImpl implements OrderService {&#10;&#10;    private OrderRepository orderRepository;&#10;    private UserRepository userRepository;&#10;    private ProductRepository productRepository;&#10;    private OrderItemRepository orderItemRepository;&#10;    private CartItemRepository cartItemRepository;&#10;&#10;    @Autowired&#10;    public OrderServiceImpl(OrderRepository orderRepository, UserRepository userRepository, ProductRepository productRepository, OrderItemRepository orderItemRepository, CartItemRepository cartItemRepository) {&#10;        this.orderRepository = orderRepository;&#10;        this.userRepository = userRepository;&#10;        this.productRepository = productRepository;&#10;        this.orderItemRepository = orderItemRepository;&#10;        this.cartItemRepository = cartItemRepository;&#10;    }&#10;&#10;    @Override&#10;    @Transactional&#10;    public void checkout(Long buyerId) {&#10;&#10;        User buyer = userRepository.findById(buyerId).orElseThrow(() -&gt; new RuntimeException(&quot;Buyer not found&quot;));&#10;&#10;        List&lt;CartItem&gt; cartItems = cartItemRepository.findByBuyerId(buyerId);&#10;        if (cartItems.isEmpty()) {&#10;            throw new RuntimeException(&quot;No cartItems found&quot;);&#10;        }&#10;        Order order = new Order();&#10;        order.setBuyer(buyer);&#10;        order.setCreatedAt(LocalDateTime.now());&#10;        order.setStatus(OrderStatus.PLACED);&#10;        orderRepository.save(order);&#10;&#10;        BigDecimal totalPrice = BigDecimal.ZERO;&#10;        for (CartItem cartItem : cartItems) {&#10;            Product product = cartItem.getProduct();&#10;            OrderItem orderItem = new OrderItem();&#10;            orderItem.setOrder(order);&#10;            orderItem.setProduct(product);&#10;            orderItem.setQuantity(cartItem.getQuantity());&#10;            orderItem.setPrice(product.getPrice());&#10;            totalPrice = totalPrice.add(product.getPrice().multiply((BigDecimal.valueOf(cartItem.getQuantity()))));&#10;            orderItemRepository.save(orderItem);&#10;        }&#10;&#10;        order.setTotal(totalPrice);&#10;        orderRepository.save(order);&#10;&#10;        cartItemRepository.deleteByBuyerId(buyerId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;OrderResponse&gt; getOrderHistory(Long buyerId) {&#10;        List&lt;Order&gt; orders = orderRepository.findByBuyerId(buyerId);&#10;        List&lt;OrderResponse&gt; orderResponses = new ArrayList&lt;&gt;();&#10;        for (Order order : orders) {&#10;            List&lt;OrderItem&gt; orderItems = orderItemRepository.findByOrder(order);&#10;            List&lt;OrderItemResponse&gt; itemResponses = new ArrayList&lt;&gt;();&#10;            for (OrderItem item : orderItems) {&#10;                OrderItemResponse itemResponse = new OrderItemResponse(&#10;                        item.getProduct().getName(),&#10;                        item.getQuantity(),&#10;                        item.getPrice().doubleValue()&#10;                );&#10;                itemResponses.add(itemResponse);&#10;            }&#10;            OrderResponse orderResponse = new OrderResponse(&#10;                    order.getId(),&#10;                    order.getStatus().name(),&#10;                    order.getTotal().doubleValue(),&#10;                    order.getCreatedAt(),&#10;                    itemResponses&#10;            );&#10;            orderResponses.add(orderResponse);&#10;        }&#10;        return orderResponses;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>